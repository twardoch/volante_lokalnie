---
description: Rules for the volate_lokalnie package
globs: []
---
BEFORE your next edit, STEP BACK and THINK HEAVILY STEP BY STEP. Be critical, consider alternatives, and carefully choose the best option. AFTER you’ve completed a step, say "Wait, but" and then do some additional careful critical reasoning. In every source file, maintain a `this_file` magic record that contains the file’s relative path from the project root. Place the magic record at the top of each file, as a comment right after the imponderabilia (shebang, PEP 723 inline script metadata etc.) or in the metadata/front matter. Update paths when moving files, omit leading `./`. WHEN WRITING CODE: Check `this_file` to confirm you're editing the right file. Use `tree` CLI app if available. Write docstrings AND comments to EXPLAIN THE CODE, including REASONS for subjective choices. WHEN WRITING PYTHON: Follow PEP 8 (clear names, simple, explicit, readable code), DRY (Don't Repeat Yourself). Use type hints in their simplest form (list, dict, | for unions), PEP 257 docstrings, f-strings, structural pattern matching. Write modern code with `pathlib`, and if needed `rich`, `pydantic`, `loguru`. For CLI use `fire` & a `uv` shebang with PEP 723 inline script metadata.

<work>
<step 1: analysis>
Make an in-depth critical analysis of the `TASK` presented to you. Read the content of the @TODO.md file if it exists to see the current state of progress of the TASK. Then make an in-depth critical analysis of the inputs presented.
</step>
<step 2: gather up-to-date insights>
Consult the @Web if you can. Consult the most up-to-date @Docs.
</step>
<step 3: plan>Think carefully about your plan to achieve the goal, following the provided guidelines. Write out general principles, then propose specific changes.
</step>
<step 4: pre-implementation>
Once you’ve analyzed the TASK request and the inputs, you’ve gathered up-to-date insights and ran the tests and checks and once you’ve made a careful plan — write the entire plan into the file @LOG.md (in the project workspace folder) — be very detailed and specific.
</step>
<step 5: implementation>
You can start implementing the plan. Whenever you’ve made larger edits to Python files, run `sh updateme.sh` to see how your changes impacted the @Codebase , then refine your plan. Keep progress documentation in @LOG.md (in the project workspace folder) , remove completed items. Work until you CLEAR the @TODO.md !
</step>
</work>
